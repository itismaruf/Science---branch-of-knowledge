# app.py

import streamlit as st
import pandas as pd
import os
import time
from utils import (
    load_data, analyze_data_quality, 
    summarize_columns_for_gpt, ask_gpt_smart_cleaning, apply_gpt_cleaning,
    plot_data_visualizations, train_model, plot_predictions
)
from AI_helper import (
    summarize_metrics, suggest_model, post_prediction_advice, continue_chat
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")

# –ó–∞—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            body {
                margin: 0;
                padding: 0;
            }
            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background-color: var(--background-color);
                color: var(--text-color);
                z-index: 9999;
                font-family: 'Segoe UI', sans-serif;
            }
                .splash-title {
                    font-size: 3.2em;
                    font-weight: bold;
                    text-align: center;
                    margin-bottom: 20px;
                    margin-top: -5%; 
                }
            }
            .splash-author {
                position: absolute;
                bottom: 20px;
                right: 30px;
                font-size: 0.9em;
                color: gray;
            }
        </style>
        <div class="splash-container">
            <div class="splash-title">ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞<br>–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤</div>
        </div>
    """, unsafe_allow_html=True)
    placeholder = st.empty()
    time.sleep(3.5)
    st.session_state.app_loaded = True
    st.rerun()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": "üìä",
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "üìà",
    "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏": "üî¨",
    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã": "üìñ",
    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥": "üí¨"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state["page"] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

    if uploaded_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = load_data(uploaded_file)
            st.session_state["df"] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            st.dataframe(df.head())

            # –ö–Ω–æ–ø–∫–∞ —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é GPT
            with st.expander("üìñ –ü—Ä–∏–Ω—Ü–∏–ø –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", expanded=False):
                st.write("""
                    –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
                    - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –æ—á–∏—Å—Ç–∫–∏.
                    - –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–ª–∏ –º–µ–¥–∏–∞–Ω–æ–π.
                    - –í —Å–ª—É—á–∞–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
                    - –ë—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.
                """)

            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    else:
        st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞")

# === –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ===
elif st.session_state["page"] == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    if "df" in st.session_state:
        df = st.session_state["df"]

        # –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        st.markdown(analyze_data_quality(df))

        # –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if st.button("üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—á–µ—Ä–µ–∑ LLM)"):
            with st.spinner("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò..."):
                nulls_before = df.isnull().sum()
                total_before = nulls_before.sum()

                if total_before == 0:
                    st.info("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.write("**–î–æ –æ—á–∏—Å—Ç–∫–∏ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):**")
                    st.dataframe(nulls_before[nulls_before > 0])

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –∫ GPT
                    summary = summarize_columns_for_gpt(df)
                    gpt_response = ask_gpt_smart_cleaning(summary)
                    cleaned_columns = apply_gpt_cleaning(df, gpt_response)
                    st.session_state["df"] = df

                    nulls_after = df.isnull().sum()
                    total_after = nulls_after.sum()
                    total_cleaned = total_before - total_after

                    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                    if total_cleaned > 0:
                        st.success(f"üßπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {int(total_cleaned)} –ø—Ä–æ–ø—É—Å–∫–æ–≤.")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç GPT
                    if "cleaning_log" in st.session_state and st.session_state["cleaning_log"]:
                        st.markdown("**üìù –õ–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –ò–ò:**")
                        for line in st.session_state["cleaning_log"]:
                            st.write(f"- {line}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é GPT
                    st.markdown("**üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç –ò–ò:**")
                    st.code(gpt_response)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        if st.button("üìå –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å"):
            summary = df.describe(include='all').to_string()
            st.info(suggest_model(summary))

    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.title("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if "df" in st.session_state:
        df = st.session_state["df"]
        x = st.selectbox("X –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        y = st.selectbox("Y –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", [""] + list(df.columns))
        y = y if y else None

        st.markdown("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
        chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Boxplot", "Bar-–≥—Ä–∞—Ñ–∏–∫"])

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        filters = {}
        for col in [x, y] if y else [x]:
            if pd.api.types.is_numeric_dtype(df[col]):
                min_val, max_val = float(df[col].min()), float(df[col].max())
                selected = st.slider(f"–§–∏–ª—å—Ç—Ä –¥–ª—è {col}", min_val, max_val, (min_val, max_val))
                filters[col] = selected

        # –¢–æ–ø-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        top_n = None
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ top-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
            top_n = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ N", 3, 30, 10)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = plot_data_visualizations(df, x=x, y=y, top_n=top_n, numeric_filters=filters, chart_type=chart_type)
        if fig:
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
elif st.session_state["page"] == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.title("üî¨ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    if "df" in st.session_state:
        df = st.session_state["df"]
        target = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        model_type = st.selectbox("–ú–æ–¥–µ–ª—å", ["", "Decision Tree", "Logistic Regression", "Neural Network"])

        if st.button("–ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"):
            model_type = "Neural Network"

        # –û–±—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
        if model_type and target:
            metrics, model, X_test, y_test, y_pred = train_model(df, target, model_type)
            st.subheader("üìã –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
            st.info(summarize_metrics(metrics["weighted avg"]))
            with st.expander("–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"):
                st.json(metrics)
            st.subheader("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            plot_predictions(y_test, y_pred)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.session_state.update({
                "X_test": X_test,
                "y_pred": y_pred,
                "model_type": model_type,
                "target": target
            })

            if st.button("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò"):
                st.info(summarize_metrics(metrics["weighted avg"]))
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é ===
elif st.session_state["page"] == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã":
    st.title("üìñ –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é")
    if all(k in st.session_state for k in ["X_test", "y_pred", "model_type"]):
        if st.button("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò"):
            st.subheader("üì¨ –°–æ–≤–µ—Ç—ã")
            st.success(post_prediction_advice(
                st.session_state["X_test"],
                st.session_state["y_pred"],
                st.session_state["model_type"],
                st.session_state.get("target", "target")
            ))
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")

# === –î–∏–∞–ª–æ–≥ —Å –ò–ò ===
elif st.session_state["page"] == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥":
    st.title("üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò")
    user_input = st.text_area("–í–∞—à –≤–æ–ø—Ä–æ—Å:")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        response = continue_chat(user_input)
        st.success(response)

# –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä)
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: gray;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A.</div>
""", unsafe_allow_html=True)