# app.py

import streamlit as st
import pandas as pd
import os
import time
from utils import (
    load_data, 
    summarize_columns_for_gpt, ask_gpt_smart_cleaning, apply_gpt_cleaning,
    plot_data_visualizations, train_model, plot_predictions, default_cleaning
)
from AI_helper import (
    summarize_metrics, continue_chat, get_chatgpt_response, update_context
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")

# –ó–∞—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            body {
                margin: 0;
                padding: 0;
            }
            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background-color: var(--background-color);
                color: var(--text-color);
                z-index: 9999;
                font-family: 'Segoe UI', sans-serif;
            }
                .splash-title {
                    font-size: 3.2em;
                    font-weight: bold;
                    text-align: center;
                    margin-bottom: 20px;
                    margin-top: -5%; 
                }
            }
            .splash-author {
                position: absolute;
                bottom: 20px;
                right: 30px;
                font-size: 0.9em;
                color: gray;
            }
        </style>
        <div class="splash-container">
            <div class="splash-title">ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞<br>–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤</div>
        </div>
    """, unsafe_allow_html=True)
    placeholder = st.empty()
    time.sleep(1.5)
    st.session_state.app_loaded = True
    st.rerun()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "‚öôÔ∏è",
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "üìä",
    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏": "üî¨",
    "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤": "üí¨"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state["page"] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls"])

    if uploaded_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = load_data(uploaded_file)
            st.session_state["df"] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)
            st.subheader("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head())

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            num_rows = df.shape[0]
            num_cols = df.shape[1]
            col_names = ", ".join(list(df.columns))
            data_summary = f"–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç {num_rows} —Å—Ç—Ä–æ–∫ –∏ {num_cols} —Å—Ç–æ–ª–±—Ü–æ–≤. –°—Ç–æ–ª–±—Ü—ã: {col_names}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ò–ò
            update_context("data_summary", data_summary)
            
            # –í—ã–≤–æ–¥ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ load_data)
            # (–≠—Ç–æ—Ç –±–ª–æ–∫ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ st.subheader –∏ st.markdown –≤–Ω—É—Ç—Ä–∏ load_data,
            # –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∑–¥–µ—Å—å)
            
            # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            with st.expander("üéØ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
                user_description = st.text_area(
                    "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –¥–∞–Ω–Ω—ã–µ, –≤–∞—à—É —Ü–µ–ª—å –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∞–Ω–∞–ª–∏–∑–∞.",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£ –º–µ–Ω—è –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ –≤—ã—è–≤–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏."
                )
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò
                if st.button("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"):
                    if user_description.strip():
                        update_context("user_description", user_description)
                        prompt = (
                            f"–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {data_summary}\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: {user_description}\n\n"
                            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫—É—é, –ø–æ–ª–µ–∑–Ω—É—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é. "
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö ‚Äì –æ–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞). "
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ ‚Äì –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–π –≤–∞–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —É–∫–∞–∂–∏, –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. "
                            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                        )
                        with st.spinner("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò..."):
                            ai_interpretation = get_chatgpt_response(prompt)
                        st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò:")
                        st.write(ai_interpretation)
                    else:
                        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞.")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")


# === –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
elif st.session_state["page"] == "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if "df" in st.session_state:
        df = st.session_state["df"]

        # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        with st.expander("üìñ –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", expanded=False):
            st.write("""
                **–ü–æ—á–µ–º—É –≤–∞–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö?**
                
                –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 
                –º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –∏—Å–∫–∞–∑–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:
                - –£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏,
                - –û–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏,
                - –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
                
                **–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏:**
                - –ü—Ä–æ–ø—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (—Å—Ä–µ–¥–Ω–∏–º, –º–µ–¥–∏–∞–Ω–æ–π –∏–ª–∏ –º–æ–¥–æ–π),
                - –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
            """)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ LLM
        if st.button("‚ú®üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—á–µ—Ä–µ–∑ LLM)"):
            with st.spinner("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò..."):
                nulls_before = df.isnull().sum()
                total_before = nulls_before.sum()

                if total_before == 0:
                    st.info("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.markdown("**–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ –æ—á–∏—Å—Ç–∫–∏:**")
                    st.dataframe(nulls_before[nulls_before > 0])

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
                    summary = summarize_columns_for_gpt(df)
                    gpt_response = ask_gpt_smart_cleaning(summary)

                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    apply_gpt_cleaning(df, gpt_response)
                    st.session_state["df"] = df

                    nulls_after = df.isnull().sum()
                    total_after = nulls_after.sum()
                    total_cleaned = total_before - total_after

                    st.success("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    if total_cleaned > 0:
                        st.success(f"üßπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {int(total_cleaned)} –ø—Ä–æ–ø—É—Å–∫–æ–≤.")

                    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏)
                    all_logs = st.session_state.get("cleaning_log", [])
                    filtered_logs = [
                        log for log in all_logs 
                        if any(sub in log for sub in ["–∑–∞–ø–æ–ª–Ω–µ–Ω–æ", "–Ω–µ —É–¥–∞–ª–æ—Å—å", "–æ—à–∏–±–∫–∞", "—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–ø—É—Å–∫–∏"])
                    ]
                    if filtered_logs:
                        st.markdown("### –ò—Ç–æ–≥ –æ—á–∏—Å—Ç–∫–∏:")
                        report = {}
                        for log in filtered_logs:
                            parts = log.split(":")
                            if len(parts) >= 2:
                                col = parts[0].strip()
                                action = ":".join(parts[1:]).strip()
                                if col in report:
                                    report[col] += "; " + action
                                else:
                                    report[col] = action
                        for col, action in report.items():
                            st.write(f"**{col}**: {action}")
                    else:
                        # –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.
                        st.info("–û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚Äì –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")

                    st.markdown("**üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç –ò–ò:**")
                    st.code(gpt_response)

            # –ü–æ—Å–ª–µ —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            unspecified_columns = st.session_state.get("unspecified_columns", [])

            if unspecified_columns:
                st.markdown("### –ö–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö:")
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–ø–∏–∏ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                for col in unspecified_columns.copy():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                    if st.button(f"–í—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É '{col}'", key=f"clean_{col}"):
                        result = default_cleaning(df, col)
                        st.success(result)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
                        st.session_state["cleaning_log"].append(result)
                        # –£–¥–∞–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å
                        unspecified_columns.remove(col)
                        st.session_state["unspecified_columns"] = unspecified_columns

    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.title("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if "df" in st.session_state:
        df = st.session_state["df"]
        x = st.selectbox("X –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        y = st.selectbox("Y –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", [""] + list(df.columns))
        y = y if y else None

        st.markdown("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
        chart_type = st.selectbox(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Boxplot", "Bar-–≥—Ä–∞—Ñ–∏–∫", "–õ–∞–π–Ω–ø–ª–æ—Ç"]
        )

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        filters = {}
        for col in [x, y] if y else [x]:
            if pd.api.types.is_numeric_dtype(df[col]):
                min_val, max_val = float(df[col].min()), float(df[col].max())
                selected = st.slider(f"–§–∏–ª—å—Ç—Ä –¥–ª—è {col}", min_val, max_val, (min_val, max_val))
                filters[col] = selected

        # –¢–æ–ø-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        top_n = None
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ top-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
            top_n = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ N", 3, 30, 10)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = plot_data_visualizations(df, x=x, y=y, top_n=top_n, numeric_filters=filters, chart_type=chart_type)
        if fig:
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
elif st.session_state["page"] == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.title("üî¨ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞
    with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:"):
        st.markdown("""
    –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö 
    (–∞ —Ç–∞–∫–∂–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–µ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö¬ª, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ). –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 
    –∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.

    **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:**
    - **Decision Tree**
    - **Logistic Regression**
    - **Neural Network**

    –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –≤—ã–±–æ—Ä–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º.
    """)

    if "df" in st.session_state:
        df = st.session_state["df"]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
        if st.button("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
            # –ó–¥–µ—Å—å –±–µ—Ä—ë–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –∫–ª—é—á–æ–º "data_summary"
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π context –∏–∑ AI_helper.py, –æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç data_summary.
            prompt_target = (
                f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {context.get('data_summary', '–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–ª–µ–≤–æ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, "
                "–∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."
            )
            recommended_target = get_chatgpt_response(prompt_target)
            st.info(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {recommended_target}")

        # –î–∞–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –º–æ–¥–µ–ª–∏
        target = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        model_type = st.selectbox("–ú–æ–¥–µ–ª—å", ["", "Decision Tree", "Logistic Regression", "Neural Network", 
                                             "Random Forest", "Gradient Boosting", "SVM", "KNN"])
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ‚Äì –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω, –∑–∞–¥–∞—ë—Ç—Å—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if st.button("–ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"):
            model_type = "Neural Network"
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if model_type and target:
            metrics, model, X_test, y_test, y_pred = train_model(df, target, model_type)
            if metrics is not None:
                st.subheader("üìã –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                st.info(summarize_metrics(metrics["weighted avg"]))
                with st.expander("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"):
                    st.json(metrics)
    
                st.subheader("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                plot_predictions(y_test, y_pred)
    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                st.session_state.update({
                    "X_test": X_test,
                    "y_pred": y_pred,
                    "model_type": model_type,
                    "target": target
                })
    
                if st.button("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò"):
                    st.info(summarize_metrics(metrics["weighted avg"]))
            else:
                st.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: "
                    "–≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∫–ª–∞—Å—Å–∞, "
                    "–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–æ–¥–µ–ª–∏."
                )
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")


# === –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
elif st.session_state["page"] == "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤":
    st.title("üí¨ –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    st.markdown(
        "–ï—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö, –º–µ—Ç—Ä–∏–∫–∞—Ö –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, "
        "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ."
    )

    # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    suggested_questions = [
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
        "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        "–ö–∞–∫–∏–µ —à–∞–≥–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏?",
        "–ö–∞–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å?"
    ]
    
    question_choice = st.radio("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", suggested_questions)
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    custom_question = st.text_area(
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞..."
    )
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
    final_question = custom_question.strip() if custom_question.strip() != "" else question_choice

    if st.button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        answer = continue_chat(final_question)
        st.success(answer)


# –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä)
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: gray;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A.</div>
""", unsafe_allow_html=True)