# app.py

import streamlit as st
import pandas as pd
import os
import time
from utils import (
    load_data, 
    summarize_columns_for_gpt, ask_gpt_smart_cleaning, apply_gpt_cleaning,
    plot_data_visualizations, train_model, plot_predictions
)
from AI_helper import (
    summarize_metrics, suggest_model, post_prediction_advice, continue_chat, get_chatgpt_response, update_context
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")

# –ó–∞—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            body {
                margin: 0;
                padding: 0;
            }
            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background-color: var(--background-color);
                color: var(--text-color);
                z-index: 9999;
                font-family: 'Segoe UI', sans-serif;
            }
                .splash-title {
                    font-size: 3.2em;
                    font-weight: bold;
                    text-align: center;
                    margin-bottom: 20px;
                    margin-top: -5%; 
                }
            }
            .splash-author {
                position: absolute;
                bottom: 20px;
                right: 30px;
                font-size: 0.9em;
                color: gray;
            }
        </style>
        <div class="splash-container">
            <div class="splash-title">ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞<br>–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤</div>
        </div>
    """, unsafe_allow_html=True)
    placeholder = st.empty()
    time.sleep(1.5)
    st.session_state.app_loaded = True
    st.rerun()

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "‚öôÔ∏è",
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "üìä",
    "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏": "üî¨",
    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã": "üìñ",
    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥": "üí¨"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state["page"] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls"])

    if uploaded_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = load_data(uploaded_file)
            st.session_state["df"] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)
            st.subheader("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head())

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            num_rows = df.shape[0]
            num_cols = df.shape[1]
            col_names = ", ".join(list(df.columns))
            data_summary = f"–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç {num_rows} —Å—Ç—Ä–æ–∫ –∏ {num_cols} —Å—Ç–æ–ª–±—Ü–æ–≤. –°—Ç–æ–ª–±—Ü—ã: {col_names}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ò–ò
            update_context("data_summary", data_summary)

            # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üìã –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò"):                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò
                prompt_auto = (
                    f"–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {data_summary}. "
                    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é: "
                    "–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö, –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–π –∞—Ç—Ä–∏–±—É—Ç—ã. –ï—Å–ª–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –¥–∞–π –∞–Ω–∞–ª–∏–∑. "
                    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã."
                )
                with st.spinner("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é..."):
                    ai_auto_interpretation = get_chatgpt_response(prompt_auto)
                st.write(ai_auto_interpretation)

            # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            with st.expander("üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞"):
                user_description = st.text_area(
                    "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –¥–∞–Ω–Ω—ã–µ, –≤–∞—à—É —Ü–µ–ª—å –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∞–Ω–∞–ª–∏–∑–∞.",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£ –º–µ–Ω—è –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ –≤—ã—è–≤–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏."
                )
                if user_description.strip():
                    update_context("user_description", user_description)
                    st.success("‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")



# === –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
elif st.session_state["page"] == "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if "df" in st.session_state:
        df = st.session_state["df"]

        # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        with st.expander("üìñ –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", expanded=False):
            st.write("""
                **–ü–æ—á–µ–º—É –≤–∞–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö?**
                
                –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                –º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –∏—Å–∫–∞–∑–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:
                - –£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏,
                - –û–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏,
                - –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
                
                **–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏:**
                - –ü—Ä–æ–ø—É—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (—Å—Ä–µ–¥–Ω–∏–º, –º–µ–¥–∏–∞–Ω–æ–π –∏–ª–∏ –º–æ–¥–æ–π),
                - –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º,
                - –í—ã–≤–æ–¥–∏—Ç—Å—è –∏—Ç–æ–≥ –ø–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            """)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ LLM
        if st.button("‚ú®üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—á–µ—Ä–µ–∑ LLM)"):
            with st.spinner("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò..."):
                nulls_before = df.isnull().sum()
                total_before = nulls_before.sum()

                if total_before == 0:
                    st.info("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.markdown("**–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ –æ—á–∏—Å—Ç–∫–∏:**")
                    st.dataframe(nulls_before[nulls_before > 0])

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
                    summary = summarize_columns_for_gpt(df)
                    gpt_response = ask_gpt_smart_cleaning(summary)

                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    apply_gpt_cleaning(df, gpt_response)
                    st.session_state["df"] = df

                    nulls_after = df.isnull().sum()
                    total_after = nulls_after.sum()
                    total_cleaned = total_before - total_after

                    st.success("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    if total_cleaned > 0:
                        st.success(f"üßπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {int(total_cleaned)} –ø—Ä–æ–ø—É—Å–∫–æ–≤.")

                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    all_logs = st.session_state.get("cleaning_log", [])
                    # –û—Ç–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
                    filtered_logs = [
                        log for log in all_logs 
                        if any(sub in log for sub in ["–∑–∞–ø–æ–ª–Ω–µ–Ω–æ", "–Ω–µ —É–¥–∞–ª–æ—Å—å", "–æ—à–∏–±–∫–∞", "—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–ø—É—Å–∫–∏"])
                    ]

                    if filtered_logs:
                        st.markdown("### –ò—Ç–æ–≥ –æ—á–∏—Å—Ç–∫–∏:")
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º.
                        report = {}
                        for log in filtered_logs:
                            parts = log.split(":")
                            if len(parts) >= 2:
                                col = parts[0].strip()
                                action = ":".join(parts[1:]).strip()
                                # –ï—Å–ª–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
                                if col in report:
                                    report[col] += "; " + action
                                else:
                                    report[col] = action
                        for col, action in report.items():
                            st.write(f"**{col}**: {action}")
                    else:
                        st.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞.")

                    st.markdown("**üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç –ò–ò:**")
                    st.code(gpt_response)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")


# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.title("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    if "df" in st.session_state:
        df = st.session_state["df"]
        x = st.selectbox("X –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        y = st.selectbox("Y –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", [""] + list(df.columns))
        y = y if y else None

        st.markdown("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
        chart_type = st.selectbox(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Boxplot", "Bar-–≥—Ä–∞—Ñ–∏–∫", "–õ–∞–π–Ω–ø–ª–æ—Ç"]
        )

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        filters = {}
        for col in [x, y] if y else [x]:
            if pd.api.types.is_numeric_dtype(df[col]):
                min_val, max_val = float(df[col].min()), float(df[col].max())
                selected = st.slider(f"–§–∏–ª—å—Ç—Ä –¥–ª—è {col}", min_val, max_val, (min_val, max_val))
                filters[col] = selected

        # –¢–æ–ø-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        top_n = None
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ top-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
            top_n = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ N", 3, 30, 10)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = plot_data_visualizations(df, x=x, y=y, top_n=top_n, numeric_filters=filters, chart_type=chart_type)
        if fig:
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")

# === –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
elif st.session_state["page"] == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.title("üî¨ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞
    with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:"):
        st.markdown("""
        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. 
        –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂, –æ—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ —Ç.–ø.) –∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å.
        
        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
        - **Decision Tree:** –ù–∞–≥–ª—è–¥–Ω–∞—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–∞—è, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        - **Logistic Regression:** –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.
        - **Neural Network:** –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è), –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
        
        –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –≤—ã–±–æ—Ä–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–µ–∂–∏–º–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
        """)

    if "df" in st.session_state:
        df = st.session_state["df"]
        target = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns)
        model_type = st.selectbox("–ú–æ–¥–µ–ª—å", ["", "Decision Tree", "Logistic Regression", "Neural Network", "Random Forest", "Gradient Boosting", "SVM", "KNN"])
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ‚Äì –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if st.button("–ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"):
            model_type = "Neural Network"
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if model_type and target:
            metrics, model, X_test, y_test, y_pred = train_model(df, target, model_type)
            if metrics is not None:
                st.subheader("üìã –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                st.info(summarize_metrics(metrics["weighted avg"]))
                with st.expander("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"):
                    st.json(metrics)
    
                st.subheader("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                plot_predictions(y_test, y_pred)
    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                st.session_state.update({
                    "X_test": X_test,
                    "y_pred": y_pred,
                    "model_type": model_type,
                    "target": target
                })
    
                if st.button("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò"):
                    st.info(summarize_metrics(metrics["weighted avg"]))
            else:
                st.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: "
                    "–≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∫–ª–∞—Å—Å–∞, "
                    "–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–æ–¥–µ–ª–∏."
                )
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")


# === –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é ===
elif st.session_state["page"] == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã":
    st.title("üìñ –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é")
    if all(k in st.session_state for k in ["X_test", "y_pred", "model_type"]):
        if st.button("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò"):
            st.subheader("üì¨ –°–æ–≤–µ—Ç—ã")
            st.success(post_prediction_advice(
                st.session_state["X_test"],
                st.session_state["y_pred"],
                st.session_state["model_type"],
                st.session_state.get("target", "target")
            ))
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")

# === –î–∏–∞–ª–æ–≥ —Å –ò–ò ===
elif st.session_state["page"] == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥":
    st.title("üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò")
    user_input = st.text_area("–í–∞—à –≤–æ–ø—Ä–æ—Å:")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        response = continue_chat(user_input)
        st.success(response)

# –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä)
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: gray;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A.</div>
""", unsafe_allow_html=True)