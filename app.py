# app.py

import streamlit as st
import pandas as pd
import os
import time
from utils import (
    load_data, 
    summarize_columns_for_gpt, ask_gpt_smart_cleaning,
    plot_data_visualizations, train_model, plot_predictions, remove_outliers_iqr, suggest_visualization_combinations
)
from AI_helper import (
    summarize_metrics, continue_chat, get_chatgpt_response, update_context, apply_gpt_cleaning, default_cleaning, context
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")


# === –ó–∞—Å—Ç–∞–≤–∫–∞ ===
if "app_loaded" not in st.session_state:
    st.markdown("""
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                width: 100%;
                font-family: 'Inter', sans-serif;
                overflow: hidden;
            }

            .splash-container {
                position: fixed;
                top: 0; left: 0;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
                color: #0f172a;
                z-index: 9999;
                animation: fadeIn 1s ease-in-out;
                transition: opacity 1s ease-out;
            }

            .splash-container.fade-out {
                opacity: 0;
                pointer-events: none;
            }

            .ai-emoji {
                font-size: 3.2em;
                margin-bottom: 20px;
                animation: pulse 2s infinite;
            }

            .splash-title {
                font-size: 2.4em;
                font-weight: 700;
                text-align: center;
                opacity: 0;
                animation: fadeUp 1.2s ease-out forwards;
                animation-delay: 0.4s;
            }

            .splash-subtext {
                font-size: 1em;
                margin-top: 12px;
                color: #475569;
                opacity: 0;
                animation: fadeUp 1.4s ease-out forwards;
                animation-delay: 0.8s;
                text-align: center;
                max-width: 600px;
                padding: 0 16px;
            }

            .splash-footer {
                position: absolute;
                bottom: 18px;
                font-size: 0.8em;
                color: #64748b;
                text-align: center;
            }

            @keyframes fadeUp {
                0% { opacity: 0; transform: translateY(20px); }
                100% { opacity: 1; transform: translateY(0); }
            }

            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            @keyframes pulse {
                0%, 100% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    transform: scale(1.15);
                    opacity: 0.75;
                }
            }
        </style>

        <div class="splash-container" id="splash">
            <div class="ai-emoji">‚ú®</div>
            <div class="splash-title">ClariData</div>
            <div class="splash-subtext">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö<br>—Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏</div>
            <div class="splash-footer">¬© Created by Rahimov M.A.</div>
        </div>

        <script>
            setTimeout(() => {
                const splash = document.getElementById("splash");
                if (splash) splash.classList.add("fade-out");
            }, 3000);
        </script>
    """, unsafe_allow_html=True)

    time.sleep(5)
    st.session_state.app_loaded = True
    st.rerun()


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å ---
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
if 'page' not in st.session_state:
    st.session_state['page'] = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'

st.markdown("""
    <style>
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä –æ—Ç–∫—Ä—ã—Ç (aria-expanded="true"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–º–µ—â–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ */
        [data-testid="stSidebar"][aria-expanded="true"] ~ .main .block-container {
            margin-left: 300px;
            transition: margin-left 0.3s ease;
        }
        /* –ö–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä —Å–≤–µ—Ä–Ω—É—Ç (aria-expanded="false"), –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ */
        [data-testid="stSidebar"][aria-expanded="false"] ~ .main .block-container {
            margin-left: 1rem;
            transition: margin-left 0.3s ease;
        }
    </style>
""", unsafe_allow_html=True)


# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def set_page(page_name):
    st.session_state['page'] = page_name

# --- –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–æ–∫ ---
st.sidebar.header("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
pages = {
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "üì•",
    "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö": "‚öôÔ∏è",
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è": "üìä",
    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏": "üî¨",
    "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)": "üí¨",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": "üìÑ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSS –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
st.markdown("""
    <style>
        div.stButton > button {
            background-color: #f0f2f6;
            color: black;
            border: 1px solid #ccc;
            border-radius: 6px;
        }
        div.stButton > button:hover {
            background-color: #e0f0ff;
            color: #007BFF;
            border: 1px solid #007BFF;
        }
    </style>
""", unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for name, icon in pages.items():
    st.sidebar.button(f"{icon} {name}", on_click=set_page, args=(name,))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# ===================== –°–¢–†–ê–ù–ò–¶–´ =======================

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if st.session_state["page"] == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    with st.container():
        st.markdown("### üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (.csv, .xlsx, .xls)")
        uploaded_file = st.file_uploader("", type=["csv", "xlsx", "xls"])

    if uploaded_file:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = load_data(uploaded_file)
            st.session_state["df"] = df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", icon="‚úÖ")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
            st.dataframe(df.head(), use_container_width=True)

            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            num_rows = df.shape[0]
            num_cols = df.shape[1]
            col_names = ", ".join(list(df.columns))
            data_summary = f"–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç {num_rows} —Å—Ç—Ä–æ–∫ –∏ {num_cols} —Å—Ç–æ–ª–±—Ü–æ–≤. –°—Ç–æ–ª–±—Ü—ã: {col_names}"
            update_context("data_summary", data_summary)

            # Expander —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            with st.expander("üéØ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
                st.markdown("##### üóíÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∞—à–µ–π —Ü–µ–ª–∏:")
                user_description = st.text_area(
                    "",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£ –º–µ–Ω—è –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ –≤—ã—è–≤–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.",
                    height=100
                )

                # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if st.button("‚ú® –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"):
                    if user_description.strip():
                        update_context("user_description", user_description)
                        prompt = (
                            f"–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {data_summary}\n\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_description}\n\n"
                            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∫–∞–∫–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ) "
                            "–í—ã–¥–µ–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö.(–∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—å –≤–∞–∂–Ω–æ!) "
                            "–°–º–æ—Ç—Ä–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–µ–º–∞—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥–µ –∏ —Ç.–¥.).(–∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—å –≤–∞–∂–Ω–æ!) "
                            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç —è—Å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –æ–±—â–Ω–æ—Å—Ç–∏. (–û–±—Ä–∞—à–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—å –∏ —è—Å–Ω–æ—Å—Ç—å —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –Ω–µ –ª–µ–Ω—å –±—ã–ª–æ!!!)(–∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—å –≤–∞–∂–Ω–æ!)"
                        )
                        with st.spinner("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç –ò–ò..."):
                            ai_interpretation = get_chatgpt_response(prompt)
                        st.markdown("### üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò:")
                        st.info(ai_interpretation, icon="üí°")
                    else:
                        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞.", icon="‚ö†Ô∏è")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", icon="üö´")
    else:
        st.info("‚¨Ü –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", icon="üìÅ")


# === –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
elif st.session_state["page"] == "–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("---")

    if "df" in st.session_state:
        df = st.session_state["df"]

        # –≠–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        with st.expander("üìñ –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", expanded=False):
            st.markdown("""
                #### üßº –ü–æ—á–µ–º—É –≤–∞–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö?
                –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.

                - –ü–æ–≤—ã—à–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                - –£–ª—É—á—à–∞–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                - –°–Ω–∏–∂–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞

                #### ‚öôÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:
                - –ü—Ä–æ–ø—É—Å–∫–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–∞, –º–æ–¥–∞)
                - –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            """)

        st.markdown("#### ü§ñ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        if st.button("‚ôªÔ∏è –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—á–µ—Ä–µ–∑ LLM)"):
            with st.spinner("üîç –ó–∞–ø—Ä–æ—Å –∫ –ò–ò..."):
                nulls_before = df.isnull().sum()
                total_before = nulls_before.sum()

                if total_before == 0:
                    st.info("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", icon="‚úÖ")
                else:
                    st.markdown("#### üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –æ—á–∏—Å—Ç–∫–∏:")
                    st.dataframe(nulls_before[nulls_before > 0])

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
                    summary = summarize_columns_for_gpt(df)
                    gpt_response = ask_gpt_smart_cleaning(summary)

                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ò–ò
                    apply_gpt_cleaning(df, gpt_response)
                    st.session_state["df"] = df

                    nulls_after = df.isnull().sum()
                    total_after = nulls_after.sum()
                    total_cleaned = total_before - total_after

                    st.success("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", icon="üßπ")
                    if total_cleaned > 0:
                        st.info(f"‚ú® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {int(total_cleaned)} –ø—Ä–æ–ø—É—Å–∫–æ–≤.", icon="üìä")

                    # –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥
                    all_logs = st.session_state.get("cleaning_log", [])
                    filtered_logs = [
                        log for log in all_logs 
                        if any(sub in log for sub in ["–∑–∞–ø–æ–ª–Ω–µ–Ω–æ", "–Ω–µ —É–¥–∞–ª–æ—Å—å", "–æ—à–∏–±–∫–∞", "—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–ø—É—Å–∫–∏"])
                    ]
                    if filtered_logs:
                        st.markdown("#### üìò –ò—Ç–æ–≥ –æ—á–∏—Å—Ç–∫–∏:")
                        report = {}
                        for log in filtered_logs:
                            parts = log.split(":")
                            if len(parts) >= 2:
                                col = parts[0].strip()
                                action = ":".join(parts[1:]).strip()
                                if col in report:
                                    report[col] += "; " + action
                                else:
                                    report[col] = action
                        for col, action in report.items():
                            st.write(f"**{col}**: {action}")
                    else:
                        st.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å.", icon="‚úÖ")

                    st.markdown("### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç –ò–ò:")
                    st.code(gpt_response)

            # –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –Ω–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
            unspecified_columns = st.session_state.get("unspecified_columns", [])
            if unspecified_columns:
                st.markdown("#### üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º:")
                for col in unspecified_columns.copy():
                    if st.button(f"–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É ¬´{col}¬ª –≤—Ä—É—á–Ω—É—é", key=f"clean_{col}"):
                        result = default_cleaning(df, col)
                        st.success(result)
                        st.session_state["cleaning_log"].append(result)
                        unspecified_columns.remove(col)
                        st.session_state["unspecified_columns"] = unspecified_columns

        st.markdown("---")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        st.markdown("#### üì¶ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤")
        with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤", expanded=False):
            st.markdown("""
            **–ú–µ—Ç–æ–¥ IQR –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤:**
            
            - –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–π (Q1) –∏ —Ç—Ä–µ—Ç–∏–π (Q3) –∫–≤–∞—Ä—Ç–∏–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR = Q3 - Q1).
            - –£–¥–∞–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: [Q1 - 1.5¬∑IQR, Q3 + 1.5¬∑IQR].
            
            **–í–∞–∂–Ω–æ:**
            - –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
            - –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –∏–ª–∏ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏ 1), –≥–¥–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –º–∞–ª–æ,
              –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∏–º–µ–Ω–Ω–æ
              –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º.
            """)

        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã (IQR)"):
            with st.spinner("üìâ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ IQR..."):
                df, removed_rows = remove_outliers_iqr(df)
                st.session_state["df"] = df
            st.success("‚úÖ –í—ã–±—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã.", icon="üßΩ")
            if removed_rows > 0:
                st.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_rows} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏.", icon="üìà")
            else:
                st.info("–í—ã–±—Ä–æ—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —É–¥–∞–ª–µ–Ω–∏—è.", icon="‚úîÔ∏è")
    else:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", icon="‚ö†Ô∏è")


# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
elif st.session_state["page"] == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.title("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("---")

    if "df" in st.session_state:
        df = st.session_state["df"]

        # üß≠ –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        st.markdown("#### üß≠ –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        x = st.selectbox("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ –æ—Å–∏ X", df.columns)
        y = st.selectbox("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ –æ—Å–∏ Y (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", [""] + list(df.columns))
        y = y if y else None

        # üí° –ë–ª–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —Å—Ä–∞–∑—É –ø–æ–¥ –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        with st.container():
            st.markdown(
                """
                <div style="border: 1px solid #3399ff; border-radius: 8px; padding: 10px; background-color: #f0f8ff;">
                <strong>üí° –•–æ—Ç–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É? </strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
                </div>
                """,
                unsafe_allow_html=True
            )
            st.markdown("<div style='margin-top: -5px;'></div>", unsafe_allow_html=True)
            if st.button("‚ú® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"):
                df_info = f"–ù–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {', '.join(df.columns)}"
                suggestion = suggest_visualization_combinations(df_info)
                st.info(f"üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:\n\n{suggestion}")

        st.markdown("---")

        # üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        st.markdown("#### üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
        chart_type = st.selectbox(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "Boxplot", "Bar-–≥—Ä–∞—Ñ–∏–∫", "–õ–∞–π–Ω–ø–ª–æ—Ç"]
        )

        st.markdown("---")

        # üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        st.markdown("#### üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        filters = {}
        for col in [x, y] if y else [x]:
            if pd.api.types.is_numeric_dtype(df[col]):
                min_val, max_val = float(df[col].min()), float(df[col].max())
                selected = st.slider(f"–§–∏–ª—å—Ç—Ä –ø–æ {col}", min_val, max_val, (min_val, max_val))
                filters[col] = selected

        st.markdown("---")

        # üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        st.markdown("#### üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏")
        top_n = None
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ top-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
            top_n = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ N", 3, 30, 10)

        st.markdown("---")

        # üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        st.markdown("#### üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = plot_data_visualizations(
            df,
            x=x,
            y=y,
            top_n=top_n,
            numeric_filters=filters,
            chart_type=chart_type
        )

        if fig:
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

    else:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", icon="üìé")

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
elif st.session_state["page"] == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.title("üî¨ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    st.markdown("---")

    with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"):
        st.markdown("""
        –ü–æ–ª—É—á–∏—Ç–µ **—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –ø–æ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, 
        –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–∏ —Ü–µ–ª–µ–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö¬ª). 

        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
        - Decision Tree
        - Logistic Regression
        - Neural Network
        - Random Forest
        - Gradient Boosting
        - SVM
        - KNN

        –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –≤—ã–±–æ—Ä–µ ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º.
        """)

    if "df" in st.session_state:
        df = st.session_state["df"]

        # üí° –ë–ª–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –º–æ–¥–µ–ª–∏
        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ò–ò")
        with st.container():
            st.markdown(
                """
                <div style="border: 1px solid #3399ff; border-radius: 8px; padding: 12px; background-color: #f0f8ff; margin-bottom: 10px;">
                <strong>ü§ñ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</strong><br>
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –æ—Ç –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
                </div>
                """,
                unsafe_allow_html=True
            )
            if st.button("üí° –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –º–æ–¥–µ–ª—å", key="recommendation"):
                prompt_target = (
                    f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {context.get('data_summary', '–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–ª–µ–≤–æ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, "
                    "–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. "
                    "–¢–∞–∫–∂–µ —É–∫–∞–∂–∏, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –æ–±–µ—Å–ø–µ—á–∏—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—É—é —Ä–∞–±–æ—Ç—É, –∏ –æ–±—ä—è—Å–Ω–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ)."
                )
                recommended_target = get_chatgpt_response(prompt_target)
                st.info(f"üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ò–ò:\n\n{recommended_target}")

        st.markdown("---")

        # üéØ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –º–æ–¥–µ–ª–∏
        st.markdown("#### üéØ –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –º–æ–¥–µ–ª–∏")
        target = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", df.columns, key="target_select")

        model_type = st.selectbox(
            "–ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
            ["–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", "Decision Tree", "Logistic Regression", "Neural Network", 
             "Random Forest", "Gradient Boosting", "SVM", "KNN"],
            key="model_select"
        )

        if st.button("ü§ñ –ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", key="auto_model"):
            model_type = "Neural Network"
            st.success("–ú–æ–¥–µ–ª—å 'Neural Network' –≤—ã–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        st.markdown("---")

        # üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏)
        st.markdown("#### üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", key="start_training"):
            if model_type == "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å":
                st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å.")
            else:
                try:
                    metrics, model, X_test, y_test, y_pred = train_model(df, target, model_type)
                    if metrics is not None:
                        st.subheader("üìã –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                        st.info(summarize_metrics(metrics["weighted avg"]))
                        with st.expander("üìë –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–∞—Ö"):
                            st.json(metrics)

                        st.subheader("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                        plot_predictions(y_test, y_pred)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        st.session_state.update({
                            "X_test": X_test,
                            "y_pred": y_pred,
                            "model_type": model_type,
                            "target": target,
                            "metrics": metrics  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ò–ò
                        })
                    else:
                        st.error(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ –∫–ª–∞—Å—Å–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π."
                        )
                except Exception:
                    st.error(
                        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º."
                    )
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'.")

        st.markdown("---")

        # üß† –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        if "metrics" in st.session_state:
            if st.button("üß† –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º", key="ai_comment"):
                if "ai_commentary" not in st.session_state:
                    st.session_state["ai_commentary"] = summarize_metrics(st.session_state["metrics"]["weighted avg"])
                st.info(st.session_state["ai_commentary"])
        else:
            st.info("–ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º.")

    else:
        st.warning("üì• –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", icon="üìé")



# === –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
elif st.session_state["page"] == "–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)":
    st.title("üí¨ –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ò–ò)")
    st.markdown("---")

    st.markdown(
        """
        –•–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å, **–ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫**, —á—Ç–æ –∑–Ω–∞—á–∞—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–ª–∏ –∫–∞–∫ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö?  
        –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Ç–∞.
        """
    )

    suggested_questions = [
        "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
        "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞?",
        "–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –º–æ–¥–µ–ª—å –∏ –∫–∞–∫ –∏—Ö —É—Å—Ç—Ä–∞–Ω–∏—Ç—å?",
        "–ö–∞–∫ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –∏ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å?"
    ]

    with st.container():
        st.markdown("#### üí° –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        selected_question = st.radio("", suggested_questions, key="radio_question")

        if st.button("üì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"):
            st.session_state["chosen_question"] = selected_question

    st.markdown("#### üí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å")
    user_input = st.text_area(
        "",
        value=st.session_state.get("chosen_question", ""),
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–ª–∞ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞?",
        height=100,
        label_visibility="collapsed"
    )

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–∞—Ç
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        question = user_input.strip()
        if question:
            with st.spinner("–ò–ò –¥—É–º–∞–µ—Ç..."):
                answer = continue_chat(question)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append(("üßë‚Äçüíª –í—ã", question))
                st.session_state.chat_history.append(("ü§ñ –ò–ò", answer))
        else:
            st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    if st.session_state.chat_history:
        st.markdown("---")
        st.markdown("### üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
        for speaker, message in st.session_state.chat_history:
            st.markdown(f"**{speaker}:** {message}")


if st.session_state.get("page") == "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è":
    try:
        with open("README.md", "r", encoding="utf-8") as f:
            readme_content = f.read()
        st.markdown(readme_content, unsafe_allow_html=True)
    except FileNotFoundError:
        st.error("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª README.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ.")


# –§—É—Ç–µ—Ä –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–≤—Ç–æ—Ä)
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –≤–Ω–∏–∑—É –ª–µ–≤–æ, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
st.markdown("""
    <style>
        .bottom-right {
            position: fixed;
            right: 15px;
            bottom: 10px;
            font-size: 0.75em;
            color: #333333;
            z-index: 9999;
        }
    </style>
    <div class="bottom-right">¬© Created by Rahimov M.A.</div>
""", unsafe_allow_html=True)
